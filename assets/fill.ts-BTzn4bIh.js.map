{"version":3,"file":"fill.ts-BTzn4bIh.js","sources":["../../../common/src/utils.ts","../../src/lib/formUtils.ts","../../src/scripts/fill.ts"],"sourcesContent":["import {\n\ttype Question,\n\tQuestionTypeWithOptions,\n\tQuestionTypesWithOptionsSchema,\n\ttype QuestionWithOptions,\n\tQuestionWithOptionsSchema,\n} from './domain/question'\n\nexport const isQuestionWithOptions = (\n\tquestion: Question,\n): question is QuestionWithOptions =>\n\tQuestionWithOptionsSchema.safeParse(question).success\n\nexport const isQuestionTypeWithOptions = (\n\tquestionType: Question['type'],\n): questionType is QuestionTypeWithOptions =>\n\tQuestionTypesWithOptionsSchema.safeParse(questionType).success\n","import {\n\ttype BaseQuestion,\n\ttype Option,\n\ttype Question,\n\ttype QuestionWithOptions,\n\tisQuestionTypeWithOptions,\n} from '@form-solver/common'\n\nconst spans = Array.from(document.getElementsByTagName('span')).filter(\n\t(s) => s.textContent,\n)\n\nexport function getClassesOfClickedSpan(): Promise<Array<string>> {\n\treturn new Promise((resolve) => {\n\t\tfor (const span of spans) {\n\t\t\tspan.style.cursor = 'pointer'\n\t\t\tspan.onclick = (e) => {\n\t\t\t\te.stopPropagation()\n\t\t\t\tfor (const span of spans) {\n\t\t\t\t\tspan.onclick = null\n\t\t\t\t\tspan.style.cursor = 'default'\n\t\t\t\t}\n\t\t\t\tresolve(Array.from(span.classList))\n\t\t\t}\n\t\t}\n\t})\n}\n\nexport function getSpansByClasses(\n\tclasses: Array<string>,\n\tparent: Document | HTMLElement = document,\n) {\n\tif (classes.length === 0) return []\n\treturn getElementsBySelectors(`span.${classes.join('.')}`, parent)\n}\n\nexport function getElementsBySelectors<T extends HTMLElement = HTMLElement>(\n\tselectors: string,\n\tparent: Document | HTMLElement = document,\n): T[] {\n\treturn Array.from(parent.querySelectorAll(selectors)) as T[]\n}\n\nexport function getQuestionTypeAndElements(\n\telementsByType: Record<Question['type'], HTMLElement[]>,\n): [type: Question['type'], elements: HTMLElement[]] | null {\n\tfor (const [type, elements] of Object.entries(elementsByType)) {\n\t\tif (elements.length) return [type as Question['type'], elements]\n\t}\n\n\treturn null\n}\n\nexport function getCommonParentElement(element: HTMLElement) {\n\tconst wrapper =\n\t\telement.parentElement?.parentElement?.parentElement?.parentElement\n\tif (!wrapper) throw new Error('wrapper not found')\n\treturn wrapper\n}\n\ntype QuestionsElementsMap = Map<string, HTMLElement | Map<string, HTMLElement>>\n\nexport function createQuestionObjects(\n\ttitles: HTMLElement[],\n\tradioOptionClasses: Array<string> = [],\n\tcheckBoxOptionClasses: Array<string> = [],\n): { questions: Question[]; questionsElementsMap: QuestionsElementsMap } {\n\tconst questions: Question[] = []\n\n\tconst questionsElementsMap = new Map<\n\t\tstring,\n\t\tHTMLElement | Map<string, HTMLElement>\n\t>()\n\n\tfor (let i = 0; i < titles.length; i++) {\n\t\tconst title = titles[i]\n\n\t\tif (!title.textContent) {\n\t\t\tconsole.warn('Title not found')\n\t\t\tcontinue\n\t\t}\n\n\t\tconst questionContainer = getCommonParentElement(title)\n\n\t\tif (!questionContainer) throw new Error('Question container not found')\n\n\t\tconst elementsByType = {\n\t\t\tradio: getSpansByClasses(radioOptionClasses, questionContainer),\n\t\t\tcheckbox: getSpansByClasses(checkBoxOptionClasses, questionContainer),\n\t\t\tinput: getElementsBySelectors<HTMLInputElement>(\n\t\t\t\t'input',\n\t\t\t\tquestionContainer,\n\t\t\t),\n\t\t\ttextarea: getElementsBySelectors<HTMLTextAreaElement>(\n\t\t\t\t'textarea',\n\t\t\t\tquestionContainer,\n\t\t\t),\n\t\t} satisfies Record<Question['type'], Array<HTMLElement>>\n\n\t\tconst result = getQuestionTypeAndElements(elementsByType)\n\n\t\tif (!result) {\n\t\t\tconsole.warn('Question type not found')\n\t\t\tcontinue\n\t\t}\n\n\t\tconst [type, elements] = result\n\n\t\tconst questionBase = {\n\t\t\ttitle: title.textContent,\n\t\t\tid: `Q-${i}`,\n\t\t} satisfies BaseQuestion\n\n\t\tif (isQuestionTypeWithOptions(type)) {\n\t\t\tconst optionElements = elements\n\n\t\t\tconst options: Array<Option> = []\n\n\t\t\tconst optionsElementsMap = new Map<string, HTMLElement>()\n\t\t\tquestionsElementsMap.set(questionBase.id, optionsElementsMap)\n\n\t\t\tfor (let i = 0; i < optionElements.length; i++) {\n\t\t\t\tconst option = optionElements[i]\n\t\t\t\tif (!option?.textContent) continue\n\n\t\t\t\tconst optionId = `O-${i}`\n\t\t\t\toptionsElementsMap.set(optionId, option)\n\n\t\t\t\toptions.push({\n\t\t\t\t\ttext: option.textContent,\n\t\t\t\t\tid: optionId,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tconst question: QuestionWithOptions = {\n\t\t\t\t...questionBase,\n\t\t\t\ttype,\n\t\t\t\toptions,\n\t\t\t}\n\n\t\t\tquestions.push(question)\n\t\t} else {\n\t\t\tconst question = {\n\t\t\t\t...questionBase,\n\t\t\t\ttype,\n\t\t\t} satisfies Question\n\n\t\t\tquestionsElementsMap.set(question.id, elements[0])\n\n\t\t\tquestions.push(question)\n\t\t}\n\t}\n\n\treturn { questions, questionsElementsMap }\n}\n\nexport const getOptionById = (\n\toptionId: string,\n\tquestionId: string,\n\tquestionsElementsMap: QuestionsElementsMap,\n): HTMLElement => {\n\tconst questionRecord = questionsElementsMap.get(questionId)\n\n\tif (!questionRecord) throw new Error('Question not found')\n\n\tif (questionRecord instanceof Map) {\n\t\tconst optionRecord = questionRecord.get(optionId)\n\n\t\tif (!optionRecord) throw new Error('Option not found')\n\n\t\treturn optionRecord\n\t}\n\n\treturn questionRecord\n}\n","import './index.css'\n\nimport type { AppRouter } from '@server/app-router/app.router'\nimport type { TRPCClientError } from '@trpc/client'\nimport { isTRPCClientError, trpc } from '../api/trpc'\nimport {\n\tcreateQuestionObjects,\n\tgetOptionById,\n\tgetSpansByClasses,\n} from '../lib/formUtils'\n\nfunction triggerScreenEffect(): void {\n\t// Create the screen effect element\n\tconst effect = document.createElement('div')\n\teffect.className = 'screen-effect'\n\n\t// Append it to the body\n\tdocument.body.appendChild(effect)\n\n\t// Remove the element after the animation ends\n\teffect.addEventListener('animationend', () => {\n\t\teffect.remove()\n\t})\n}\n\ntype Config = {\n\tsuccessScreenEffect: boolean\n}\n\nasync function main(\n\tconfig: Config = { successScreenEffect: true },\n): Promise<MainResult> {\n\tconst questionTitleClasses = ['M7eMe']\n\tconst titles = getSpansByClasses(questionTitleClasses)\n\n\tconst radioClasses = ['aDTYNe', 'snByac', 'OvPDhc', 'OIC90c']\n\n\tconst checkboxClasses = ['aDTYNe', 'snByac', 'n5vBHf', 'OIC90c']\n\n\tconst { questions, questionsElementsMap } = createQuestionObjects(\n\t\ttitles,\n\t\tradioClasses,\n\t\tcheckboxClasses,\n\t)\n\n\ttry {\n\t\tconsole.log('questions:', questions)\n\t\tconst { textAnswers, optionAnswers } = await trpc.form.answer.mutate({\n\t\t\tquestions,\n\t\t\turl: window.location.href,\n\t\t})\n\n\t\tfor (const answer of textAnswers) {\n\t\t\tconst questionElement = questionsElementsMap.get(answer.questionId)\n\n\t\t\tif (!questionElement) throw Error('Question element not found')\n\n\t\t\tif (\n\t\t\t\t!(\n\t\t\t\t\tquestionElement instanceof HTMLInputElement ||\n\t\t\t\t\tquestionElement instanceof HTMLTextAreaElement\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'Question element is not an input element',\n\t\t\t\t\tquestionElement,\n\t\t\t\t)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tquestionElement.value = answer.answer\n\n\t\t\tconst event = new Event('input', { bubbles: true })\n\t\t\tquestionElement.dispatchEvent(event)\n\t\t}\n\n\t\tfor (const answer of optionAnswers) {\n\t\t\tfor (const optionId of answer.correctOptionIds) {\n\t\t\t\tconst optionElement = getOptionById(\n\t\t\t\t\toptionId,\n\t\t\t\t\tanswer.questionId,\n\t\t\t\t\tquestionsElementsMap,\n\t\t\t\t)\n\n\t\t\t\toptionElement.click()\n\t\t\t\toptionElement.click()\n\t\t\t}\n\t\t}\n\n\t\tif (config.successScreenEffect) {\n\t\t\ttriggerScreenEffect()\n\t\t}\n\n\t\treturn { status: 'SUCCESS' }\n\t} catch (cause) {\n\t\tif (isTRPCClientError(cause)) {\n\t\t\treturn {\n\t\t\t\tstatus: 'ERROR',\n\t\t\t\tcause,\n\t\t\t}\n\t\t}\n\n\t\treturn { status: 'UNEXPECTED_ERROR', cause }\n\t}\n}\n\nexport type MainResult =\n\t| {\n\t\t\tstatus: 'SUCCESS'\n\t  }\n\t| {\n\t\t\tstatus: 'ERROR'\n\t\t\tcause: TRPCClientError<AppRouter>\n\t  }\n\t| {\n\t\t\tstatus: 'UNEXPECTED_ERROR'\n\t\t\tcause: unknown\n\t  }\n\nconst createPostMessage =\n\t(port: chrome.runtime.Port) => (payload: MainResult) => {\n\t\tport.postMessage(payload)\n\t}\n\nchrome.runtime.onConnect.addListener(async (port) => {\n\tconsole.log('connected')\n\n\tconst postMessage = createPostMessage(port)\n\n\tconst result = await main()\n\n\tpostMessage(result)\n})\n\nwindow.addEventListener('keydown', async (event) => {\n\t// TODO: make shortcut configurable\n\tif (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a') {\n\t\tevent.preventDefault()\n\n\t\tawait main({\n\t\t\tsuccessScreenEffect: false,\n\t\t})\n\n\t\t// TODO add error handling\n\t}\n})\n\nconsole.log('content script loaded')\n"],"names":["isQuestionTypeWithOptions","questionType","QuestionTypesWithOptionsSchema","s","getSpansByClasses","classes","parent","getElementsBySelectors","selectors","getQuestionTypeAndElements","elementsByType","type","elements","getCommonParentElement","element","wrapper","_c","_b","_a","createQuestionObjects","titles","radioOptionClasses","checkBoxOptionClasses","questions","questionsElementsMap","i","title","questionContainer","result","questionBase","optionElements","options","optionsElementsMap","option","optionId","question","getOptionById","questionId","questionRecord","optionRecord","triggerScreenEffect","effect","main","config","radioClasses","checkboxClasses","textAnswers","optionAnswers","trpc","answer","questionElement","event","optionElement","cause","isTRPCClientError","createPostMessage","port","payload","postMessage"],"mappings":"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"}